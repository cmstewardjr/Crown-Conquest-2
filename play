<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crown Conquest</title>
    <style>
        /* Your CSS styles here */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }

        .game-container {
            background: rgba(0, 0, 0, 0.8);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            max-width: 1200px;
            width: 100%;
        }

        .game-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .game-title {
            font-size: 2.5em;
            background: linear-gradient(45deg, #ffd700, #ffed4a);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 20px;
        }

        .player-info {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            flex: 1;
            min-width: 200px;
        }

        .player-info.active {
            background: rgba(255, 215, 0, 0.3);
            border: 2px solid gold;
        }

        .board-container {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(7, 60px);
            grid-template-rows: repeat(5, 60px);
            gap: 2px;
            background: #333;
            padding: 10px;
            border-radius: 10px;
            border: 3px solid gold;
        }

        .cell {
            width: 60px;
            height: 60px;
            background: #f0f0f0;
            border: 1px solid #ccc;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
        }

        .cell:hover {
            background: #e0e0e0;
            transform: scale(1.05);
        }

        .cell.highlight {
            background: #ffeb3b;
            box-shadow: 0 0 10px rgba(255, 235, 59, 0.5);
        }

        .cell.valid-move {
            background: #4caf50;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
        }

        .cell.valid-attack {
            background: #f44336;
            box-shadow: 0 0 10px rgba(244, 67, 54, 0.5);
        }

        .crown-space {
            background: linear-gradient(45deg, #ffd700, #ffed4a) !important;
        }

        .crown-space::before {
            content: '👑';
            position: absolute;
            font-size: 24px;
            z-index: 1;
        }

        .piece {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            border: 3px solid #333;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            z-index: 2;
        }

        .piece:hover {
            transform: scale(1.1);
        }

        .piece.player1 {
            background: #2196f3;
            color: white;
        }

        .piece.player2 {
            background: #e91e63;
            color: white;
        }

        .piece.crowned {
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.8);
            border-color: gold;
        }

        .piece.crowned::after {
            content: '👑';
            position: absolute;
            top: -5px;
            right: -5px;
            font-size: 12px;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #ffd700, #ffed4a);
            color: #333;
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .dice-container {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        .dice {
            font-size: 3em;
            margin: 10px;
            padding: 20px;
            background: white;
            color: #333;
            border-radius: 10px;
            display: inline-block;
            min-width: 80px;
            animation: roll 0.5s ease-in-out;
        }

        @keyframes roll {
            0% { transform: rotate(0deg); }
            50% { transform: rotate(180deg); }
            100% { transform: rotate(360deg); }
        }

        .log {
            background: rgba(0, 0, 0, 0.5);
            padding: 20px;
            border-radius: 10px;
            max-height: 200px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 14px;
        }

        .log-entry {
            margin-bottom: 5px;
            padding: 5px;
            border-left: 3px solid gold;
            padding-left: 10px;
        }

        .setup-phase {
            text-align: center;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .reserve-pieces {
            margin-top: 10px;
        }

        .reserve-pieces h4 {
            margin-bottom: 10px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            max-width: 500px;
            width: 90%;
        }

        .modal h2 {
            color: gold;
            margin-bottom: 20px;
        }

        .winner-celebration {
            font-size: 4em;
            margin: 20px 0;
            animation: celebrate 1s ease-in-out infinite alternate;
        }

        @keyframes celebrate {
            0% { transform: scale(1); }
            100% { transform: scale(1.1); }
        }

        .bot-thinking {
            background: rgba(255, 165, 0, 0.2);
            border: 1px solid orange;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-header">
            <h1 class="game-title">Crown Conquest</h1>
            <p>Strategic Board Game vs Bot</p>
        </div>

        <div class="game-info">
            <div class="player-info" id="player1-info">
                <h3>You (Blue)</h3>
                <p id="player1-type">Numbers TBD</p>
                <p>Pieces on Board: <span id="player1-pieces">0</span></p>
                <p>Reserve: <span id="player1-reserve">12</span></p>
                <p>Crowned: <span id="player1-crowned">0</span></p>
            </div>
            <div class="player-info" id="player2-info">
                <h3>Bot (Pink)</h3>
                <p id="player2-type">Numbers TBD</p>
                <p>Pieces on Board: <span id="player2-pieces">0</span></p>
                <p>Reserve: <span id="player2-reserve">12</span></p>
                <p>Crowned: <span id="player2-crowned">0</span></p>
            </div>
        </div>

        <div class="setup-phase" id="setup-phase">
            <h2>Game Setup</h2>
            <p id="setup-message">Rolling dice to determine first player...</p>
            <button class="btn btn-primary" id="roll-setup" onclick="rollSetupDice()">Roll Dice</button>
            <div id="setup-dice-result"></div>
            <div id="placement-info" style="display: none; margin-top: 15px;">
                <p>Pieces to place: <span id="pieces-remaining">4</span></p>
                <button class="btn btn-secondary" id="finish-placement" onclick="finishPlacement()" disabled>Finish Placement</button>
            </div>
        </div>

        <div class="board-container">
            <div class="board" id="board"></div>
        </div>

        <div class="controls">
            <button class="btn btn-primary" id="place-piece" onclick="togglePlacementMode()" disabled>Place Piece</button>
            <button class="btn btn-secondary" id="roll-dice" onclick="rollDice()" disabled>Roll Dice</button>
            <button class="btn btn-primary" id="end-turn" onclick="endTurn()" disabled>End Turn</button>
            <button class="btn btn-secondary" onclick="newGame()">New Game</button>
        </div>

        <div class="dice-container" id="dice-container" style="display: none;">
            <h3>Dice Roll Results</h3>
            <div id="dice-results"></div>
            <p id="dice-message"></p>
        </div>

        <div class="log" id="game-log">
            <div class="log-entry">Game started. Waiting for setup...</div>
        </div>
    </div>

    <div class="modal" id="winner-modal">
        <div class="modal-content">
            <div class="winner-celebration">🏆</div>
            <h2 id="winner-text">Player Wins!</h2>
            <p id="win-condition">Victory Condition</p>
            <button class="btn btn-primary" onclick="newGame()">Play Again</button>
        </div>
    </div>

    <script>
        // Game state
        let gameState = {
            currentPlayer: 1, // 1 = human, 2 = bot
            phase: 'setup', // setup, placement, playing
            board: Array(5).fill().map(() => Array(7).fill(null)),
            players: {
                1: { pieces: 0, reserve: 12, crowned: 0, type: 'even', capturedPieces: [] },
                2: { pieces: 0, reserve: 12, crowned: 0, type: 'odd', capturedPieces: [] }
            },
            selectedPiece: null,
            placementMode: false,
            diceRolls: [],
            pendingAttack: null,
            chainJumpActive: false,
            piecesToPlace: 4,
            botTurn: false
        };

        // Initialize game
        function initGame() {
            createBoard();
            updateDisplay();
            logMessage("Game initialized. Click 'Roll Dice' to determine first player.");
        }

        function createBoard() {
            const board = document.getElementById('board');
            board.innerHTML = '';

            for (let row = 0; row < 5; row++) {
                for (let col = 0; col < 7; col++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.dataset.row = row;
                    cell.dataset.col = col;

                    // Mark crown spaces
                    if ((row === 0 && col === 3) || (row === 4 && col === 3)) {
                        cell.classList.add('crown-space');
                    }

                    cell.addEventListener('click', () => handleCellClick(row, col));
                    board.appendChild(cell);
                }
            }
        }

        function updateDisplay() {
            // Update player info
            document.getElementById('player1-type').textContent = `Numbers: ${gameState.players[1].type}`;
            document.getElementById('player2-type').textContent = `Numbers: ${gameState.players[2].type}`;

            // Count pieces on board
            countPiecesOnBoard();

            document.getElementById('player1-pieces').textContent = gameState.players[1].pieces;
            document.getElementById('player1-reserve').textContent = gameState.players[1].reserve;
            document.getElementById('player1-crowned').textContent = gameState.players[1].crowned;

            document.getElementById('player2-pieces').textContent = gameState.players[2].pieces;
            document.getElementById('player2-reserve').textContent = gameState.players[2].reserve;
            document.getElementById('player2-crowned').textContent = gameState.players[2].crowned;

            // Highlight active player
            document.getElementById('player1-info').classList.toggle('active', gameState.currentPlayer === 1);
            document.getElementById('player2-info').classList.toggle('active', gameState.currentPlayer === 2);

            // Update board display
            updateBoardDisplay();
        }

        function updateBoardDisplay() {
            for (let row = 0; row < 5; row++) {
                for (let col = 0; col < 7; col++) {
                    const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
                    const piece = gameState.board[row][col];

                    // Clear existing piece
                    const existingPiece = cell.querySelector('.piece');
                    if (existingPiece) {
                        existingPiece.remove();
                    }

                    // Add piece if exists
                    if (piece) {
                        const pieceElement = document.createElement('div');
                        pieceElement.className = `piece player${piece.player}${piece.crowned ? ' crowned' : ''}`;
                        // To make the opponent's pieces visible, ensure their player number is displayed
                        // Or you can choose to display a neutral icon, but player number helps distinguish
                        pieceElement.textContent = piece.player === 1 ? 'P1' : 'P2'; // Clearly label pieces
                        cell.appendChild(pieceElement);
                    }
                }
            }
        }

        function countPiecesOnBoard() {
            gameState.players[1].pieces = 0;
            gameState.players[2].pieces = 0;
            gameState.players[1].crowned = 0;
            gameState.players[2].crowned = 0;

            for (let row = 0; row < 5; row++) {
                for (let col = 0; col < 7; col++) {
                    const piece = gameState.board[row][col];
                    if (piece) {
                        gameState.players[piece.player].pieces++;
                        if (piece.crowned) {
                            gameState.players[piece.player].crowned++;
                        }
                    }
                }
            }
        }

        function rollSetupDice() {
            // FIX: Make the bot's win ratio for the initial die roll slim
            // Player gets 1-12, Bot gets 1-4 (much smaller range for bot)
            const player1Roll = Math.floor(Math.random() * 12) + 1;
            const player2Roll = Math.floor(Math.random() * 4) + 1; // Bot's range reduced

            document.getElementById('setup-dice-result').innerHTML = `
                <div class="dice-container">
                    <p>You rolled: <span class="dice">${player1Roll}</span></p>
                    <p>Bot rolled: <span class="dice">${player2Roll}</span></p>
                </div>
            `;

            if (player1Roll === player2Roll) {
                document.getElementById('setup-message').textContent = "Tie! Roll again.";
                return;
            }

            const winner = player1Roll > player2Roll ? 1 : 2;
            gameState.currentPlayer = winner;

            // FIX: Make the bot less likely to always choose even numbers
            // Randomly assign odd/even preference with a slight bias towards randomness
            let botType, playerType;
            if (Math.random() < 0.5) { // 50% chance for bot to be even, 50% for odd
                botType = 'even';
                playerType = 'odd';
            } else {
                botType = 'odd';
                playerType = 'even';
            }

            gameState.players[2].type = botType;
            gameState.players[1].type = playerType;

            document.getElementById('setup-message').innerHTML = `
                ${winner === 1 ? 'You' : 'Bot'} go first!<br>
                You: ${playerType === 'even' ? 'Even' : 'Odd'} numbers<br>
                Bot: ${botType === 'even' ? 'Even' : 'Odd'} numbers<br>
                ${winner === 1 ? '<strong>Click on your side (bottom row) to place pieces, then click "Finish Placement".</strong>' : '<strong>Bot is placing pieces...</strong>'}
            `;

            gameState.phase = 'placement';
            document.getElementById('placement-info').style.display = 'block';
            document.getElementById('pieces-remaining').textContent = gameState.piecesToPlace;
            document.getElementById('place-piece').disabled = true;
            document.getElementById('roll-setup').style.display = 'none';

            updateDisplay();
            logMessage(`${winner === 1 ? 'You' : 'Bot'} won the setup roll and go first!`);

            if (winner === 2) {
                // Bot goes first, place bot pieces
                setTimeout(() => botPlacePieces(), 1000);
            }
        }

        function botPlacePieces() {
            const botRow = 0; // Bot's side
            const availableSpots = [];

            for (let col = 0; col < 7; col++) {
                if (col !== 3 && !gameState.board[botRow][col]) {
                    availableSpots.push(col);
                }
            }

            // Place all 4 pieces randomly
            for (let i = 0; i < 4 && availableSpots.length > 0; i++) {
                const randomIndex = Math.floor(Math.random() * availableSpots.length);
                const col = availableSpots.splice(randomIndex, 1)[0];

                gameState.board[botRow][col] = {
                    player: 2,
                    crowned: false
                };

                gameState.players[2].reserve--;
                gameState.piecesToPlace--;
            }

            updateDisplay();
            logMessage("Bot finished placing pieces. Your turn to place pieces!");

            // Switch to player
            gameState.currentPlayer = 1;
            gameState.piecesToPlace = 4;
            document.getElementById('pieces-remaining').textContent = gameState.piecesToPlace;
            document.getElementById('setup-message').innerHTML = `
                <strong>Your turn! Click on your side (bottom row) to place pieces, then click "Finish Placement".</strong>
            `;
        }

        function togglePlacementMode() {
            gameState.placementMode = !gameState.placementMode;
            document.getElementById('place-piece').textContent = gameState.placementMode ? 'Cancel Placement' : 'Place Piece';

            if (gameState.placementMode) {
                highlightValidPlacements();
            } else {
                clearHighlights();
            }
        }

        function highlightValidPlacements() {
            if (gameState.currentPlayer !== 1) return; // Only for human player

            clearHighlights();
            const row = 4; // Human player's side

            for (let col = 0; col < 7; col++) {
                if (col === 3) continue; // Skip crown space
                if (!gameState.board[row][col]) {
                    const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
                    cell.classList.add('valid-move');
                }
            }
        }

        function clearHighlights() {
            const cells = document.querySelectorAll('.cell');
            cells.forEach(cell => {
                cell.classList.remove('highlight', 'valid-move', 'valid-attack');
            });
        }

        function handleCellClick(row, col) {
            if (gameState.botTurn) return; // Ignore clicks during bot turn

            if (gameState.phase === 'placement') {
                placePiece(row, col);
            } else if (gameState.phase === 'playing') {
                if (gameState.selectedPiece) {
                    makeMove(row, col);
                } else {
                    selectPiece(row, col);
                }
            }
        }

        function placePiece(row, col) {
            if (gameState.currentPlayer !== 1) return; // Only human can place manually

            const validRow = 4; // Human player's side
            if (row !== validRow || col === 3 || gameState.board[row][col]) {
                logMessage("Invalid placement position!");
                return;
            }

            if (gameState.piecesToPlace <= 0) {
                logMessage("No more pieces to place!");
                return;
            }

            gameState.board[row][col] = {
                player: gameState.currentPlayer,
                crowned: false
            };

            gameState.players[gameState.currentPlayer].reserve--;
            gameState.piecesToPlace--;

            document.getElementById('pieces-remaining').textContent = gameState.piecesToPlace;

            if (gameState.piecesToPlace === 0) {
                document.getElementById('finish-placement').disabled = false;
                document.getElementById('finish-placement').textContent = 'Finish Placement (All pieces placed!)';
                document.getElementById('finish-placement').style.background = 'linear-gradient(45deg, #4caf50, #45a049)';
            } else {
                document.getElementById('finish-placement').disabled = false;
                document.getElementById('finish-placement').textContent = `Finish Placement (${4 - gameState.piecesToPlace}/4 placed)`;
            }

            updateDisplay();
            logMessage(`You placed a piece at (${row}, ${col}). ${gameState.piecesToPlace} pieces remaining.`);
        }

        function finishPlacement() {
            if (gameState.currentPlayer === 1) {
                // Player finished placement
                const piecesPlaced = 4 - gameState.piecesToPlace;
                if (piecesPlaced === 0) {
                    logMessage("You must place at least one piece before finishing!");
                    return;
                }

                // Start the game
                gameState.phase = 'playing';
                document.getElementById('setup-phase').style.display = 'none';
                document.getElementById('place-piece').style.display = 'none'; // No longer need explicit place piece button
                document.getElementById('roll-dice').disabled = false;
                // The rest of the function was cut off in your provided code.
                // Ensure you have the full 'finishPlacement' function here.
            }
        }

        function logMessage(message) {
            const log = document.getElementById('game-log');
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = message;
            log.prepend(entry); // Add to the top
            log.scrollTop = 0; // Scroll to the top to see new messages
        }

        // Call initGame when the page loads
        document.addEventListener('DOMContentLoaded', initGame);
    </script>
</body>
</html>
